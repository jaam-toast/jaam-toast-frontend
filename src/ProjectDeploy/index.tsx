import { ReactElement, useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";

import { BuildStepCard } from "../@shared";
import useBuildingLog from "./useBuildingLog";
import * as css from "./index.css";

// TODO: remove mock data.
const MOCK_LOGS = [
  `[17:17:59.288] Running build in San Francisco, USA (West) â€“ sfo1`,
  `[17:17:59.342] Cloning github.com/ponjaehyeok/jamtotest0001 (Branch: main, Commit: a3adeba)`,
  `[17:17:59.471] Previous build cache not available`,
  `[17:18:00.142] Cloning completed: 799.237ms`,
  `[17:18:00.275] Running "vercel build"`,
  `[17:18:00.721] Vercel CLI 28.18.3`,
  `[17:18:01.312] Installing dependencies...`,
  `[17:18:07.417] npm WARN deprecated w3c-hr-time@1.0.2: Use your platform's native performance.now() and performance.timeOrigin.`,
  `[17:18:07.510] npm WARN deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser`,
  `[17:18:07.545] npm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility`,
  `[17:18:07.619] npm WARN deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead`,
  `[17:18:11.530] npm WARN deprecated svgo@1.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.`,
  `[17:18:18.580] `,
  `[17:18:18.581] added 1482 packages in 17s`,
  `[17:18:18.581] `,
  `[17:18:18.581] 233 packages are looking for funding`,
  `[17:18:18.581]   run "npm fund" for details`,
  `[17:18:18.623] Detected "package-lock.json" generated by npm 7+...`,
  `[17:18:18.624] Running "npm run build"`,
  `[17:18:18.936] `,
  `[17:18:18.936] > jaam-toast-test@0.1.0 build`,
  `[17:18:18.936] > react-scripts build`,
  `[17:18:18.936] `,
  `[17:18:20.348] Creating an optimized production build...`,
  `[17:18:26.795] Compiled successfully.`,
  `[17:18:26.795] `,
  `[17:18:26.795] File sizes after gzip:`,
  `[17:18:26.796] `,
  `[17:18:26.808]   46.62 kB  build/static/js/main.a31a41f3.js`,
  `[17:18:26.808]   1.79 kB   build/static/js/787.0c4ca650.chunk.js`,
  `[17:18:26.808]   541 B     build/static/css/main.073c9b0a.css`,
  `[17:18:26.808] `,
  `[17:18:26.809] The project was built assuming it is hosted at /.`,
  `[17:18:26.809] You can control this with the homepage field in your package.json.`,
  `[17:18:26.809] `,
  `[17:18:26.809] The build folder is ready to be deployed.`,
  `[17:18:26.809] You may serve it with a static server:`,
  `[17:18:26.809] `,
  `[17:18:26.809]   npm install -g serve`,
  `[17:18:26.809]   serve -s build`,
  `[17:18:26.809] `,
  `[17:18:26.809] Find out more about deployment here:`,
  `[17:18:26.811] `,
  `[17:18:26.811]   https://cra.link/deployment`,
  `[17:18:26.811] `,
  `[17:18:26.878] Build Completed in /vercel/output [26s]`,
];

export function ProjectDeploy() {
  const navigate = useNavigate();
  const logListRef = useRef<HTMLUListElement>(null);
  const [buildingLog, setBuildingLog] = useState<string[]>([]);
  const [isBuildLogFold, setIsBuildLogFold] = useState<boolean>(false);
  const [isCompleteFold, setIsCompleteFold] = useState<boolean>(true);

  // useBuildingLog("projectName", (data: string) => {
  //   setBuildingLog(prev => prev.concat(data));

  //   // TODO: Remove. temporary logic.
  //   if (data === "A new deployment's data is saved successfully!") {
  //     navigate("./preview");
  //   }
  // });

  useEffect(() => {
    const interval = setInterval(() => {
      if (!MOCK_LOGS.length) {
        clearInterval(interval);
        return;
      }
      const log = MOCK_LOGS.shift();

      if (!log) return;

      setBuildingLog(prev => prev.concat(log));
    }, 1000);

    return () => {
      clearInterval(interval);
    };
  }, []);

  useEffect(() => {
    if (!logListRef.current) {
      return;
    }

    logListRef.current.scrollTo({
      top: Number.MAX_SAFE_INTEGER,
      behavior: "smooth",
    });
  }, [buildingLog]);

  useEffect(() => {
    if (!buildingLog[buildingLog.length - 1]?.includes("Build Completed")) {
      return;
    }

    setIsBuildLogFold(true);

    const unfoldTimeout = setTimeout(() => {
      setIsCompleteFold(false);
    }, 500);

    const scrollTimeout = setTimeout(() => {
      window.location.href = "#complete";
    }, 1000);

    return () => {
      clearTimeout(unfoldTimeout);
      clearTimeout(scrollTimeout);
    };
  }, [buildingLog]);

  return (
    <div className={css.container}>
      <section className={css.titleSection}>
        <h2 className={css.mainTitle}>Deploy.</h2>
        <p className={css.subTitle}>
          Please follow the steps to configure your Project and deploy it.
        </p>
      </section>

      <BuildStepCard step={3} />

      <section
        className={css.buildLogSection}
        onClick={() => setIsBuildLogFold(!isBuildLogFold)}
      >
        <h3 className={css.sectionTitle}>Build Log</h3>
        <ul
          className={isBuildLogFold ? css.hide : css.buildLogList}
          ref={logListRef}
        >
          {buildingLog.map((log, i) => (
            <li key={log + i}>{log}</li>
          ))}
        </ul>
      </section>

      <section className={css.previewSection} id="complete">
        <h3 className={css.sectionTitle}>Complete!</h3>
        <div className={isCompleteFold ? css.hide : css.mainSection}>
          <div className={css.buttonConsole}>
            <button className={css.previewOptionButton}>visit to site</button>
            <button className={css.previewOptionButton}>go to dashboard</button>
            <button className={css.previewOptionButton}>add domain</button>
          </div>
        </div>
      </section>
    </div>
  );
}
